<html>
    <header>
        <title>Мое домашнее задание по лекции 3.1 "Классы и объекты"</title>
        <style>
            h1, h2 {
                font-size: 18px;
            }

            body {
                max-width: 550px;
                margin-left: 25%;
            }
        </style>
    </header>
    <body>
        <h1 style="">Мое домашнее задание по лекции 3.1 "Классы и объекты"</h1>
            <h2>1. Мое понимание инкапсуляции</h2>
                <p>Для меня инкапсуляция является прямым выражением процесса проектирования.</p>
                <p>Я проектирую интеграции и доработки под Битрикс24, в основном под коробочную версию.
                Основная часть работы состоит в том, чтобы бизнесовые хотелки структурировать, определить логическую вложенность,
                решить возможные противоречия, а потом - потом упаковать получившуюся бизнесопонятную структуру в сущности и логику Битрикса.
                Это не совсем техническое проектирование, мы не определяем прямо архитектуру кода проекта - ее определяет разработчик с экспертизой в Битриксе.
                Но мы определяем 3 вещи: какие сущности у нас есть, что с ними можно делать и как происходит обработка данных (обмен, хранениеи т.п.).</p>
                <p>Фактически это и есть ООП, только в упрощенной форме: есть Классы, в которых лежат строго определенные заранее свойства,
                часть из которых имеет значения по умолчанию. Например, Анкета клиента, в которой есть поля, а у полей по умолчанию стоит значение
                "Клиент не предоставил информацию". Есть некий "поток", то бишь заполнение Анкеты, которое может происходить по-разному
                и зависит от ответов, которые будут вноситься в некоторые поля-"свойства", - это методы, логика работы Класса.
                Есть создание отдельных экземпляров Анкеты - например, она автоматически присваивается какой-то сущности при создании
                в виде "по умолчанию", и затем мы редактируем каждый "объект" Анкеты независимо друг от друга.</p>
                <p>Кроме прочего, контект сильно зависит от интерфейса (пользовательского ли, программного ли). Нам нужно делать один запрос к серверу
                на страницу в большинстве случаев - так у нас получается группировка Классов в некие общие Классы, данные по которым мы сможем узнавать
                одновременно в одном запросе. Это фактически и есть "контекст" нашего ООП.</p>
                <p>Ну и да, сокрытие свойств. С точки зрения пользовательского интерфейса это прямо аксиома. Странно, что это может быть новостью
                для отдельных программистов.У нашей Анкеты есть поля, в которые зашита определенная логика прохождения. Мы старались, вынули ее
                из заказчика, формализовали, спроектировали, реализовали в коде и теперь мы не хотим, чтобы ее можно было вот так просто взять и сломать.
                Поэтому мы не даем рядовым пользователям никаких админских прав либо даем крайне ограниченные, которые не повлияют на
                работоспособность системы. Скажем, дописать еще один подпункт в обычном списке-выборе - да пожалуйста. А если у нас там в зависимости от
                каждого выбранного пункта дальше своя логика скрытия и показа других полей - увольте. Никакого доступа. Я вижу, что это реально полная аналогия.
                В принципе ровно то же самое с API.</p>
                <p>Мне близка и понятна логика ООП. Возможно, я попала в хорошую среду и мы делаем неплохое проектирование, которое и у меня в голове
                укладывает многие вещи верно. Собственно, на курс я пошла, чтобы лучше и более самостоятельно делать детальное техническое проектирование.</p>
            <h2>2. В чем плюсы и минусы объектов</h2>
                <p>Если я верно понимаю, плюсов в них больше, чем минусов. И писать стоит конкретно о php. Вопрос с подвохом. Попробую ответить.</p>
                <p>Минусы объектов</p>
                <ul>
                    <li>Мы не можем изменить созданные объекты ретроспективно, если мы их создали, а потом поменяли класс.</li>
                    <li>Мы не можем защитить от перезаписывания или удаления публичные свойства, и в случае необходимости такого свойства рискуем.</li>
                    <li>Объект - птица гордая, пока не пнешь - не полетит. Поэтому все равно будем вызывать их процедуркой.</li>
                    <li>(Все, больше не могу придумать. : )</li>
                </ul>
                <p>Плюсы объектов</p>
                <ul>
                    <li>Мы можем заранее определить самые важные свойства и не допустить создания ущербных сущностей</li>
                    <li>У объектов есть общие свойства, которые можно задать как константы и менять сразу во всех объектах, если что</li>
                    <li>Объекты, хоть и несут изначально одинаковую функциональность, после создания независимы друг от друга и позволяют архитектурно минимизировать дублирование кода, насколько это вообще возможно</li>
                    <li>Объекты можно тиражировать, сколько угодно, и контролировать это тиражирование, т.е. строить сервисы для большой аудитории </li>
                    <li>В объектах можно хранить свойства, которые просто так не достанешь из кода и которые можно эффективно охранять, хоть они и активно участвуют в работе программы, меняются согласно определенной логике и т.п.</li>
                    <li>Объекты минимизируют риски опечаток в аргументах при обращении к собственным свойствам и методам</li>
                    <li>Объекты позволяют меняют логику в контексте 1 раз в одном месте, где вся эта логика видна, упрощают чтение и поддержку проекта</li>
                </ul>
            <h2>3. Описание 5 классов:</h2>
                <ul>
                    <li> со свойствами и методами</li>
                    <li>по 2 объекта каждого</li>
                </ul>
                <ol>
                    <li>Машина</li>
                    <li>Телевизор</li>
                    <li>Шариковая ручка</li>
                    <li>Утка</li>
                    <li>Товар</li>
                </ol>
                <p>Открыть в новом окне:</p>
                <ol>
                    <li><a href="example.php" target="_blank">Описание 5 классов</a></li>
                    <li><a href="https://github.com/Kinkreux/dzOOP1" target="_blank">Репозиторий на Github</a></li>
                </ol>
    </body>
</html>
